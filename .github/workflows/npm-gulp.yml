name: NodeJS with Gulp

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch: # Allow manual triggering

# Set default permissions for security
permissions:
  contents: write
  actions: write
  security-events: write
  checks: write
  deployments: write
  issues: write
  discussions: write
  packages: write
  pull-requests: write
  statuses: write
  models: write
  pages: write
  repository-projects: write
  attestations: write
  id-token: write

jobs:
  # Lint and security check job
  lint-and-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js (Latest LTS)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npx eslint . --ext .js,.jsx,.ts,.tsx --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif
        continue-on-error: true

      - name: Upload ESLint results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: eslint-results.sarif

      - name: Check for vulnerabilities
        run: npm audit --audit-level=moderate

      - name: Run npm audit fix (if needed)
        run: npm audit fix --dry-run

  # Main build and test job
  build-and-test:
    needs: lint-and-security
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x, 20.x, 22.x] # Updated to current LTS and stable versions
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for better caching

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .gulp-cache
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Verify Gulp installation
        run: |
          if ! command -v gulp &> /dev/null; then
            echo "Installing Gulp CLI globally"
            npm install -g gulp-cli
          fi
          gulp --version

      - name: Run Gulp default tasks
        run: gulp default
        env:
          NODE_ENV: development

      - name: Run tests with coverage
        run: |
          if npm run | grep -q "test:coverage"; then
            npm run test:coverage
          else
            npm test
          fi
        env:
          CI: true

      - name: Upload test coverage to Codecov
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Build production artifacts
        run: |
          mkdir -p build dist
          if gulp build --tasks-simple | grep -q "build"; then
            NODE_ENV=production gulp build
          else
            echo "No build task found, running default gulp task"
            NODE_ENV=production gulp
          fi
        env:
          NODE_ENV: production

      - name: Verify build artifacts
        run: |
          if [ -d "build" ] && [ "$(ls -A build)" ]; then
            echo "Build directory contains files:"
            ls -la build/
          elif [ -d "dist" ] && [ "$(ls -A dist)" ]; then
            echo "Dist directory contains files:"
            ls -la dist/
            # Copy dist to build for consistency
            cp -r dist/* build/ 2>/dev/null || true
          else
            echo "Warning: No build artifacts found in build/ or dist/"
            # Create a basic build output for artifact upload
            echo "Build completed at $(date)" > build/build-info.txt
          fi

      - name: Run additional quality checks
        run: |
          # Check if package.json scripts exist before running
          if npm run | grep -q "lint"; then
            npm run lint
          fi
          if npm run | grep -q "type-check"; then
            npm run type-check
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-node-${{ matrix.node-version }}
          path: |
            build/
            dist/
            coverage/
          retention-days: 30
          if-no-files-found: warn

      - name: Upload build logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-node-${{ matrix.node-version }}
          path: |
            npm-debug.log*
            yarn-error.log*
            .gulp-cache/
          retention-days: 7
          if-no-files-found: ignore

  # Deployment job (only on main branch)
  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-node-20.x
          path: ./artifacts

      - name: Display downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find ./artifacts -type f -name "*" | head -20

      - name: Deploy to staging (placeholder)
        run: |
          echo "Deployment step - replace with your deployment logic"
          echo "Artifacts ready for deployment:"
          ls -la ./artifacts/

  # Notification job
  notify:
    if: always()
    needs: [lint-and-security, build-and-test]
    runs-on: ubuntu-latest
    
    steps:
      - name: Notify on success
        if: needs.build-and-test.result == 'success'
        run: echo "✅ Build and tests passed successfully!"

      - name: Notify on failure
        if: needs.build-and-test.result == 'failure' || needs.lint-and-security.result == 'failure'
        run: |
          echo "❌ Build or tests failed!"
          echo "Lint and Security: ${{ needs.lint-and-security.result }}"
          echo "Build and Test: ${{ needs.build-and-test.result }}"
