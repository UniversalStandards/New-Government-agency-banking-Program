# Automated Fix Workflow for GOFAP
# This workflow automatically fixes common code issues and creates PRs

name: ðŸ”§ Automated Fixes

on:
  schedule:
    # Run twice daily for automated fixes
    - cron: '0 6,18 * * *'
  workflow_dispatch:
    inputs:
      fix_type:
        description: 'Type of fixes to apply'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - formatting
        - linting
        - security
        - dependencies
  issues:
    types: [opened, labeled]

permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: write

env:
  PYTHON_VERSION: '3.12'

jobs:
  # Automated Code Formatting and Linting Fixes
  auto-format:
    name: Auto Format & Lint Fixes
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' || 
      github.event_name == 'workflow_dispatch' || 
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'automated'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install isort autoflake

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Create fix branch
      run: |
        BRANCH_NAME="auto-fix/$(date +%Y%m%d-%H%M%S)"
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        git checkout -b $BRANCH_NAME

    - name: Apply automated fixes
      run: |
        # Remove unused imports
        autoflake --in-place --remove-all-unused-imports --remove-unused-variables --recursive .
        
        # Sort imports
        isort .
        
        # Format code with Black
        black .
        
        # Fix common linting issues
        python -c "
        import os
        import re
        
        # Fix common Python issues
        for root, dirs, files in os.walk('.'):
            # Skip hidden directories and __pycache__
            dirs[:] = [d for d in dirs if not d.startswith('.') and d != '__pycache__']
            
            for file in files:
                if file.endswith('.py'):
                    filepath = os.path.join(root, file)
                    try:
                        with open(filepath, 'r', encoding='utf-8') as f:
                            content = f.read()
                        
                        original_content = content
                        
                        # Fix common issues
                        # Remove trailing whitespace
                        content = re.sub(r' +$', '', content, flags=re.MULTILINE)
                        
                        # Ensure single newline at end of file
                        content = content.rstrip() + '\n'
                        
                        # Fix double blank lines
                        content = re.sub(r'\n\n\n+', '\n\n', content)
                        
                        if content != original_content:
                            with open(filepath, 'w', encoding='utf-8') as f:
                                f.write(content)
                            print(f'Fixed: {filepath}')
                    except Exception as e:
                        print(f'Error processing {filepath}: {e}')
        "

    - name: Check for changes
      id: changes
      run: |
        if git diff --quiet; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Commit and push changes
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        git add .
        git commit -m "ðŸ”§ Apply automated code fixes
        
        - Remove unused imports and variables
        - Sort imports with isort
        - Format code with Black
        - Fix trailing whitespace
        - Fix multiple blank lines
        - Ensure single newline at end of files
        
        Generated by automated fix workflow"
        
        git push origin $BRANCH_NAME

    - name: Create Pull Request
      if: steps.changes.outputs.has_changes == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: pr } = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'ðŸ”§ Automated code fixes',
            head: process.env.BRANCH_NAME,
            base: 'main',
            body: `## ðŸ”§ Automated Code Fixes
            
            This PR contains automated fixes for common code quality issues:
            
            ### Changes Made:
            - âœ… Removed unused imports and variables
            - âœ… Sorted imports with isort
            - âœ… Formatted code with Black
            - âœ… Fixed trailing whitespace
            - âœ… Fixed multiple blank lines
            - âœ… Ensured single newline at end of files
            
            ### Validation:
            - All changes are automatically generated and safe
            - No functional changes to application logic
            - Improves code consistency and readability
            
            **This PR is safe to merge automatically.**
            
            ---
            *Generated by the automated fix workflow*`,
            labels: ['automated', 'code-quality', 'safe-to-merge']
          });
          
          console.log(`Created PR #${pr.number}: ${pr.title}`);

    - name: Close related issues
      if: steps.changes.outputs.has_changes == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // Find and close related automation issues
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'automated,code-quality'
          });
          
          for (const issue of issues.data) {
            if (issue.title.includes('Code formatting') || issue.title.includes('Linting')) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `ðŸ”§ This issue has been addressed by automated fix PR. The fixes have been applied and are ready for review.`
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed',
                state_reason: 'completed'
              });
            }
          }

  # Security Vulnerability Auto-Fix
  security-fixes:
    name: Security Vulnerability Fixes
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && 
      (github.event.inputs.fix_type == 'all' || github.event.inputs.fix_type == 'security')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        pip install pip-audit bandit safety

    - name: Run security audit and attempt fixes
      run: |
        echo "Running security audit..."
        pip-audit --output=json --output-file=pip-audit.json || true
        bandit -r . -f json -o bandit-report.json || true

    - name: Create security report issue
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          
          let reportContent = '## ðŸ”’ Security Audit Report\n\n';
          let hasIssues = false;
          
          // Process pip-audit results
          try {
            if (fs.existsSync('pip-audit.json')) {
              const auditData = JSON.parse(fs.readFileSync('pip-audit.json', 'utf8'));
              if (auditData.vulnerabilities && auditData.vulnerabilities.length > 0) {
                hasIssues = true;
                reportContent += `### Dependency Vulnerabilities (${auditData.vulnerabilities.length})\n\n`;
                auditData.vulnerabilities.forEach(vuln => {
                  reportContent += `- **${vuln.package}** ${vuln.installed_version}: ${vuln.description}\n`;
                });
                reportContent += '\n';
              }
            }
          } catch (e) {
            console.log('Error processing pip-audit results:', e);
          }
          
          // Process Bandit results
          try {
            if (fs.existsSync('bandit-report.json')) {
              const banditData = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
              if (banditData.results && banditData.results.length > 0) {
                hasIssues = true;
                reportContent += `### Code Security Issues (${banditData.results.length})\n\n`;
                banditData.results.forEach(issue => {
                  reportContent += `- **${issue.test_name}**: ${issue.issue_text} (${issue.filename}:${issue.line_number})\n`;
                });
              }
            }
          } catch (e) {
            console.log('Error processing Bandit results:', e);
          }
          
          if (hasIssues) {
            const title = 'ðŸ”’ Security Vulnerabilities Detected - ' + new Date().toISOString().split('T')[0];
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: reportContent + '\n\n**Action Required:** Please review and address these security issues.',
              labels: ['security', 'vulnerability', 'high-priority', 'automated']
            });
          }