name: Comprehensive CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

permissions:
  contents: read
  pull-requests: write

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v6
      with:
        python-version: "3.10"
        cache: 'pip'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        black --check . || echo "Black formatting issues found (non-blocking)"
      continue-on-error: true
    
    - name: Type check with mypy
      run: |
        mypy --ignore-missing-imports --exclude="stripe/main.py" . || echo "Type checking issues found (non-blocking)"
      continue-on-error: true
    
    - name: Initialize database
      run: |
        python -c "from main import app, db; app.app_context().push(); db.create_all(); print('Database initialized successfully')" || echo "Database initialization skipped"
    
    - name: Test Flask application
      run: |
        timeout 10 python main.py > flask.log 2>&1 &
        sleep 3
        curl -f http://127.0.0.1:5000/ || (cat flask.log && exit 1)
        pkill -f "python main.py" || true
    
    - name: Run pytest
      run: |
        pytest --maxfail=1 --disable-warnings -v || echo "Some tests failed (non-blocking)"
      continue-on-error: true
    
    - name: Upload Flask logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: flask-logs
        path: flask.log
        retention-days: 5

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check
      run: |
        pip install -r requirements.txt
        safety check --output text || echo "Security vulnerabilities found (non-blocking)"
      continue-on-error: true
    
    - name: Run bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || echo "Security issues found (non-blocking)"
      continue-on-error: true
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
        retention-days: 30
        if-no-files-found: ignore

  build-status:
    if: always()
    needs: [lint-and-test, security-scan]
    runs-on: ubuntu-latest
    
    steps:
    - name: Check build status
      run: |
        echo "Lint and Test: ${{ needs.lint-and-test.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        if [ "${{ needs.lint-and-test.result }}" = "failure" ]; then
          echo "❌ Build failed!"
          exit 1
        else
          echo "✅ Build succeeded!"
        fi
