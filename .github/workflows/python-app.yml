# Comprehensive CI/CD Pipeline for Government Operations and Financial Accounting Platform (GOFAP)
# This workflow provides full automation for testing, security scanning, and deployment

name: GOFAP CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  schedule:
    # Run daily at 2 AM UTC for automated maintenance
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      run_type:
        description: 'Type of run'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - security-only
        - tests-only

permissions:
  contents: read
  contents: write
  security-events: write
  issues: write
  pull-requests: write
  checks: write
  actions: write

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'

jobs:
  # Code Quality and Security Analysis
  code-quality:
    name: Code Quality & Security Analysis
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.run_type == 'full' || github.event.inputs.run_type == 'security-only'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety

    - name: Run critical syntax check
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run comprehensive linting
      run: |
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Initialize database
      run: |
        python -c "from main import app, db; app.app_context().push(); db.create_all(); print('Database initialized')" || echo "Database initialization skipped"
    - name: Test with pytest
      run: |
        pytest --maxfail=1 --disable-warnings -q || code=$?; if [ "$code" -ne 0 ] && [ "$code" -ne 5 ]; then exit "$code"; elif [ "$code" -eq 5 ]; then echo "No tests collected (exit 5)"; fi

    - name: Code formatting check with Black
      run: |
        black --check --diff .

    - name: Type checking with MyPy
      run: |
        mypy --ignore-missing-imports --exclude="stripe/main.py" . || true

    - name: Security scan with Bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt || true

    - name: Dependency vulnerability check
      run: |
        safety check --json --output safety-report.json || true
        safety check || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Comprehensive Testing
  test:
    name: Comprehensive Testing
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.run_type != 'security-only'
    needs: [code-quality]
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest-cov

    - name: Initialize database
      run: |
        python -c "from main import app, db; app.app_context().push(); db.create_all(); print('Database initialized')"

    - name: Run tests with coverage
      run: |
        coverage run -m pytest -v --tb=short
        coverage xml
        coverage report

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      if: matrix.python-version == '3.12'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Test Flask application
      run: |
        python main.py &
        APP_PID=$!
        sleep 5
        curl -f http://127.0.0.1:5000/ || (echo "App health check failed" && exit 1)
        kill $APP_PID

  # Build and Package Application
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel

    - name: Build application
      run: |
        python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/

  # Automated Issue Detection and Creation
  issue-detection:
    name: Automated Issue Detection
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: always() && (needs.code-quality.result == 'failure' || needs.test.result == 'failure')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download security reports
      uses: actions/download-artifact@v4
      with:
        name: security-reports
        path: ./reports/

    - name: Create issues for failures
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Function to create issue if not exists
          async function createIssueIfNotExists(title, body, labels) {
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });
            
            const existingIssue = issues.data.find(issue => issue.title === title);
            if (existingIssue) {
              console.log(`Issue already exists: ${title}`);
              return;
            }
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: labels,
              assignees: ['${{ github.actor }}']
            });
            console.log(`Created issue: ${title}`);
          }
          
          // Check for security issues
          try {
            if (fs.existsSync('./reports/bandit-report.json')) {
              const banditReport = JSON.parse(fs.readFileSync('./reports/bandit-report.json', 'utf8'));
              if (banditReport.results && banditReport.results.length > 0) {
                const title = 'ðŸ”’ Security vulnerabilities detected by Bandit';
                const body = `## Security Vulnerabilities Detected\n\nBandit has detected ${banditReport.results.length} potential security issues:\n\n` +
                  banditReport.results.map(issue => `- **${issue.test_name}**: ${issue.issue_text} (${issue.filename}:${issue.line_number})`).join('\n');
                await createIssueIfNotExists(title, body, ['security', 'bug', 'automated']);
              }
            }
          } catch (e) {
            console.log('Error processing Bandit report:', e.message);
          }
          
          // Check for dependency vulnerabilities
          try {
            if (fs.existsSync('./reports/safety-report.json')) {
              const safetyReport = JSON.parse(fs.readFileSync('./reports/safety-report.json', 'utf8'));
              if (safetyReport.length > 0) {
                const title = 'ðŸ“¦ Dependency vulnerabilities detected';
                const body = `## Dependency Vulnerabilities\n\nSafety has detected ${safetyReport.length} vulnerable dependencies:\n\n` +
                  safetyReport.map(vuln => `- **${vuln.package}** ${vuln.installed_version}: ${vuln.advisory}`).join('\n');
                await createIssueIfNotExists(title, body, ['dependencies', 'security', 'bug', 'automated']);
              }
            }
          } catch (e) {
            console.log('Error processing Safety report:', e.message);
          }

  # Automated Maintenance and Health Checks
  maintenance:
    name: Automated Maintenance
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.run_type == 'full'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Health check and maintenance
      run: |
        echo "Running automated maintenance tasks..."
        # Clean up old build artifacts
        find . -name "*.pyc" -delete
        find . -name "__pycache__" -type d -exec rm -rf {} + || true
        
        # Check for outdated dependencies
        pip list --outdated

    - name: Create maintenance report
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const title = 'ðŸ”§ Weekly Maintenance Report - ' + new Date().toISOString().split('T')[0];
          const body = `## Weekly Maintenance Report
          
          This is an automated maintenance report generated on ${new Date().toISOString()}.
          
          ### System Status
          - âœ… Automated maintenance tasks completed
          - âœ… Build artifacts cleaned
          - âœ… Dependencies checked for updates
          
          ### Next Actions
          - Review any security issues reported this week
          - Check for dependency updates via Dependabot
          - Review and merge any automated fix PRs
          
          *This issue will be automatically closed in 7 days.*`;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['maintenance', 'automated', 'report']
          });
